{"version":3,"sources":["HOC/Authenticate.js","Constants/action-types.js","Components/Add/Add.js","Actions/addExpense.js","Actions/editExpense.js","Components/Report/Report.js","Actions/deleteExpense.js","Components/Edit/Edit.js","Components/Login/Login.js","Actions/authorizeUser.js","Components/App/App.js","Reducers/rootReducer.js","Store/store.js","serviceWorker.js","index.js"],"names":["ComposedComponent","Authenticate","props","console","log","this","checkAndRedirect","isAuthenticated","history","push","Fragment","React","Component","compose","withRouter","connect","state","auth","ADD_EXPENSE","DELETE_EXPENSE","EDIT_EXPENSE","AUTHORIZE_USER","Add","componentDidMount","editItem","itemId","expenseId","item","data","filter","setState","expenseName","expenseAmt","expenseDate","showSuccess","hideSuccess","setTimeout","showStatusMsg","submitForm","event","editExpense","addExpense","preventDefault","handleChange","target","className","value","onSubmit","placeholder","onChange","type","mapDispatchToProps","payload","Report","delete","deleteItem","deleteExpense","edit","gridItems","map","key","onClick","Edit","match","params","Login","validateCredentials","username","password","authorizeUser","userName","App","path","component","initialState","rootReducer","action","authorizedState","addState","length","deleteState","updatedData","editState","index","parseInt","store","createStore","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYAMe,WAACA,GAAuB,IAC7BC,EAD4B,YAE9B,WAAYC,GAAO,IAAD,6BACd,4CAAMA,IACNC,QAAQC,IAAI,EAAKF,OAFH,EAFY,yFAQ1BG,KAAKC,qBARqB,mDAY1BD,KAAKC,qBAZqB,yCAeV,IACTC,EAAmBF,KAAKH,MAAxBK,gBACPJ,QAAQC,IAAIC,KAAKH,OACbK,IACAJ,QAAQC,IAAI,iBACZC,KAAKH,MAAMM,QAAQC,KAAK,QApBF,+BA2B1B,OACI,kBAAC,IAAMC,SAAP,KAEML,KAAKH,MAAMK,gBAAkB,kBAACP,EAAsBK,KAAKH,OAAY,UA9BrD,GACPS,IAAMC,WAyCjC,OAAOC,YAAQC,IAAWC,aANF,SAACC,GACrB,MAAO,CACHT,gBAAmBS,EAAMC,KAAQD,EAAMC,KAAKV,gBAAkB,QAIpB,MAA3CM,CAAkDZ,IChDhDiB,G,MAAc,eACdC,EAAiB,iBACjBC,EAAe,eACfC,EAAiB,iB,ICKxBC,E,YAEJ,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRqB,kBAAoB,WAClB,GAAG,EAAKrB,MAAMsB,SAAU,CACtB,IAAIC,EAAS,EAAKvB,MAAMsB,SAASE,UAC7BC,EAAO,EAAKzB,MAAM0B,KAAKC,QAAQ,SAAAF,GAAI,OAAIA,EAAKD,WAAaD,KAC7DtB,QAAQC,IAAI,EAAKF,MAAM0B,KAAKD,GAC5B,EAAKG,SAAS,CACZC,YAAa,EAAK7B,MAAM0B,KAAKH,GAAQM,YACrCC,WAAY,EAAK9B,MAAM0B,KAAKH,GAAQO,WACpCC,YAAa,EAAK/B,MAAM0B,KAAKH,GAAQQ,gBApBxB,EAyBnBC,YAAc,WAMZ,EAAKhC,MAAMM,QAAQC,KAAK,YA/BP,EAkCnB0B,YAAc,WACZC,YAAW,WACT,EAAKN,SAAS,CACZO,eAAe,IAEjB,EAAKnC,MAAMM,QAAQC,KAAK,aACvB,OAxCc,EA6CnB6B,WAAa,SAACC,GAAW,IAAD,EAC2B,EAAKvB,MAA9Ce,EADc,EACdA,YAAaC,EADC,EACDA,WAAYC,EADX,EACWA,YAC9B,EAAK/B,MAAMsB,UACZ,EAAKtB,MAAMsC,YAAY,CAAEd,UAAW,EAAKxB,MAAMsB,SAASE,UAAWK,cAAaC,aAAYC,gBAC5F,EAAK/B,MAAMM,QAAQC,KAAK,aAExB,EAAKP,MAAMuC,WAAW,CAACV,cAAaC,aAAYC,gBAChD,EAAKC,eAGPK,EAAMG,kBAvDW,EA0DnBC,aAAe,SAACJ,GACd,OAAOA,EAAMK,OAAOC,WAClB,IAAK,eACD,EAAKf,SAAS,CACZG,YAAaM,EAAMK,OAAOE,QAE5B,MACJ,IAAK,eACD,EAAKhB,SAAS,CACZC,YAAaQ,EAAMK,OAAOE,QAE5B,MACJ,IAAK,cACD,EAAKhB,SAAS,CACZE,WAAYO,EAAMK,OAAOE,UAtEjC3C,QAAQC,IAAI,EAAKF,OACjB,EAAKc,MAAQ,CACXU,UAAW,IACXK,YAAa,GACbC,WAAY,GACZC,YAAa,GACbI,eAAe,GARA,E,sEAiFjB,OACE,kBAAC,IAAM3B,SAAP,KACE,6BAASmC,UAAU,eACjB,4BAAQA,UAAU,cAEbxC,KAAKH,MAAMsB,SACZ,eACA,gBAGJ,0BAAMqB,UAAU,WAAWE,SAAU1C,KAAKiC,YACxC,2BAAOO,UAAU,eAAeG,YAAY,qBAAqBF,MAAOzC,KAAKW,MAAMe,YAAakB,SAAU5C,KAAKsC,aAAcO,KAAK,SAClI,2BAAOL,UAAU,cAAcG,YAAY,uBAAuBF,MAAOzC,KAAKW,MAAMgB,WAAYiB,SAAU5C,KAAKsC,aAAcO,KAAK,SAClI,2BAAOL,UAAU,eAAeC,MAAOzC,KAAKW,MAAMiB,YAAagB,SAAU5C,KAAKsC,aAAcO,KAAK,SACjG,2BAAOL,UAAU,aAAaK,KAAK,SAASJ,MAAM,aAMtD,6BAASD,UAAWxC,KAAKW,MAAMqB,cAAgB,aAAe,cAC7DhC,KAAKW,MAAMqB,cACV,wEAEA,S,GA3GQ1B,IAAMC,WAsHlBuC,EAAqB,CACzBV,WC7HK,SAAoBW,GACvB,MAAO,CAACF,KAAMhC,EAAakC,YD6H7BZ,YE9HK,SAAqBY,GACxB,MAAO,CAACF,KAAM9B,EAAcgC,aFgIjBvC,cAAQC,IAAYC,aATX,SAACC,GAAD,MAAY,CAClCY,KAAMZ,EAAMY,QAQ6CuB,GAA5CtC,CAAiES,G,UG3H1E+B,E,YAEJ,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KAKRoD,OAAS,SAACC,GACR,EAAKrD,MAAMsD,cAAcD,GACzB,EAAKrD,MAAMM,QAAQC,KAAK,YARP,EAWnBgD,KAAO,SAACjC,GACN,EAAKtB,MAAMM,QAAQC,KAAK,SAAWe,EAASE,YAV5CvB,QAAQC,IAAI,EAAKF,OAFA,E,sEAeT,IAAD,OAmBDwD,EAAYrD,KAAKH,MAAM0B,KAAK+B,KAAI,SAAChC,GAErC,OADAxB,QAAQC,IAAIuB,EAAKD,WAEjB,kBAAC,IAAMhB,SAAP,CAAgBkD,IAAKjC,EAAKI,aACxB,yBAAK6B,IAAKjC,EAAKI,YAAac,UAAU,aACpC,6BAAMlB,EAAKI,cAEb,yBAAK6B,IAAKjC,EAAKK,WAAYa,UAAU,aACnC,6BAAMlB,EAAKK,aAEb,yBAAK4B,IAAKjC,EAAKM,YAAaY,UAAU,aACpC,6BAAMlB,EAAKM,cAEb,yBAAKY,UAAU,aACb,6BAAK,4BAAQA,UAAU,aAAagB,QAAS,kBAAK,EAAKJ,KAAK9B,KAAO,uBAAGkB,UAAU,iBAChF,6BAAK,4BAAQA,UAAU,eAAegB,QAAS,kBAAK,EAAKP,OAAO3B,KAAO,uBAAGkB,UAAU,uBAO1F,OACE,kBAAC,IAAMnC,SAAP,KACE,6BAASmC,UAAU,kBACjB,4BAAQA,UAAU,iBAAlB,kBACA,6BAASA,UAAU,kBA1CnB,kBAAC,IAAMnC,SAAP,KACE,yBAAKmC,UAAU,2BACf,6BAAM,iBAER,yBAAKA,UAAU,2BACb,6BAAM,mBAER,yBAAKA,UAAU,2BACb,6BAAM,iBAER,yBAAKA,UAAU,2BACb,6BAAM,aAiCLa,S,GAhEQ/C,IAAMC,WA8ErBuC,EAAqB,CACzBK,cCrFK,SAAuBJ,GAC1B,MAAO,CAACF,KAAM/B,EAAgBiC,aDuFnBvC,cAAQC,IAAWC,aARV,SAACC,GAAD,MAAY,CAClCY,KAAMZ,EAAMY,QAO4CuB,GAA3CtC,CAAgEwC,GE1EhES,G,uLARX,OACE,6BAASjB,UAAU,gBACjB,kBAAC,EAAD,CAAKrB,SAAUnB,KAAKH,MAAM6D,MAAMC,c,GALrBrD,IAAMC,Y,kBCEnBqD,E,YAEJ,WAAY/D,GAAQ,IAAD,8BACjB,4CAAMA,KAWRgE,oBAAsB,SAAC3B,GACK,WAAvB,EAAKvB,MAAMmD,UAAgD,WAAvB,EAAKnD,MAAMoD,WAChDjE,QAAQC,IAAI,QAAQ,EAAKY,OAUzB,EAAKd,MAAMmE,eAAc,GACzB,EAAKnE,MAAMM,QAAQC,KAAK,QACxB8B,EAAMG,mBA1BS,EA+BnBC,aAAe,SAACJ,GACd,OAAOA,EAAMK,OAAOC,WAClB,IAAK,YACD,EAAKf,SAAS,CACZqC,SAAU5B,EAAMK,OAAOE,QAEzB,MACJ,IAAK,WACD,EAAKhB,SAAS,CACZsC,SAAU7B,EAAMK,OAAOE,UAtC/B,EAAK9B,MAAQ,CACXmD,SAAU,GACVC,SAAU,IAJK,E,sEAkDjB,OACE,kBAAC,IAAM1D,SAAP,KACE,6BAASmC,UAAU,SACjB,4BAAQA,UAAU,gBAAlB,SAGA,0BAAMA,UAAU,aAAaE,SAAU1C,KAAK6D,qBAC1C,2BAAOrB,UAAU,YAAYG,YAAY,kBAAkBF,MAAOzC,KAAKW,MAAMsD,SAAUrB,SAAU5C,KAAKsC,aAAcO,KAAK,SACzH,uCAAOA,KAAK,WAAWL,UAAU,WAAWG,YAAY,iBAAiBF,MAAOzC,KAAKW,MAAMoD,SAAUnB,SAAU5C,KAAKsC,cAApH,OAAuI,SACvI,2BAAOE,UAAU,eAAeK,KAAK,SAASJ,MAAM,kB,GA7D5CnC,IAAMC,WAsEpBuC,EAAqB,CACzBkB,cC5EK,SAAuBjB,GAC1B,MAAO,CAACF,KAAM7B,EAAgB+B,aD8EnBvC,cAAQC,IAAYC,YAAQ,KAAKoC,GAAjCtC,CAAsDoD,G,QE/CtDM,E,iLAnBX,OACE,yBAAK1B,UAAU,OACb,0BAAMA,UAAU,WACd,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO2B,KAAK,OAAOC,UAAWxE,EAAaqB,KAC3C,kBAAC,IAAD,CAAOkD,KAAK,UAAUC,UAAWxE,EAAaoD,KAC9C,kBAAC,IAAD,CAAOmB,KAAK,mBAAmBC,UAAWxE,EAAa6D,KACvD,kBAAC,IAAD,CAAOU,KAAK,IAAIC,UAAWR,Y,GAZzBtD,IAAMC,W,yjBCVxB,IAAM8D,EAAe,CACjB9C,KACA,CACI,CACIF,UAAW,EACXK,YAAa,YACbC,WAAY,MACZC,YAAa,eAGrBhB,KAAM,CAAEV,iBAAiB,IAkCdoE,MA/Bf,WAAoD,IAA/B3D,EAA8B,uDAAtB0D,EAAcE,EAAQ,uCAC/C,OAAOA,EAAO1B,MACV,KAAK7B,EACD,IAAMwD,EAAe,KAAO7D,GAG5B,OAFA6D,EAAe,KAAW,GAC1BA,EAAe,KAAf,gBAA4CD,EAAOxB,QAC5CyB,EACX,KAAK3D,EACD,IAAM4D,EAAQ,KAAO9D,GAOrB,OANA8D,EAASlD,KAAKkD,EAASlD,KAAKmD,QAAU,CAClCrD,UAAWoD,EAASlD,KAAKmD,OACzBhD,YAAa6C,EAAOxB,QAAQrB,YAC5BC,WAAY4C,EAAOxB,QAAQpB,WAC3BC,YAAa2C,EAAOxB,QAAQnB,aAEzB6C,EACX,KAAK3D,EACD,IAAM6D,EAAW,KAAOhE,GAExB,OADAgE,EAAYpD,KAAOoD,EAAYpD,KAAKC,QAAO,SAAAF,GAAI,OAAIA,EAAKD,YAAckD,EAAOxB,QAAQ1B,aAC9EsD,EACX,KAAK5D,EACD,IAAM6D,EAAcL,EAAOxB,QACrB8B,EAAS,KAAOlE,GAChBmE,EAAQC,SAASR,EAAOxB,QAAQ1B,WAEtC,OADAwD,EAAUtD,KAAKuD,GAASF,EACjBC,EACX,QACI,OAAOlE,ICrCJqE,EAFDC,YAAYX,G,MCSNY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DCRN4B,IAASC,OACT,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OACSQ,SAASC,eAAe,SDoH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.51c928a5.chunk.js","sourcesContent":["import React from 'react';\nimport {compose} from 'redux';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\n\nexport default (ComposedComponent) => {\n    class Authenticate extends React.Component {\n        constructor(props){\n            super(props);\n            console.log(this.props)\n        }\n\n        UNSAFE_componentWillMount() {\n            this.checkAndRedirect();\n        }\n\n        UNSAFE_componentWillUpdate() {\n            this.checkAndRedirect();\n        }\n\n        checkAndRedirect() {\n            const {isAuthenticated} = this.props;\n            console.log(this.props)\n            if(!isAuthenticated) {\n                console.log(\"coming hereee\")\n                this.props.history.push(\"/\")\n            }\n        }\n\n        \n\n        render() {\n            return (\n                <React.Fragment>\n                   \n                    { this.props.isAuthenticated ? <ComposedComponent {...this.props} /> : null }\n                </React.Fragment>\n            )\n        }\n    }\n\n    const mapStateToProps = (state) => {\n        return {\n            isAuthenticated : (state.auth) ? state.auth.isAuthenticated : null\n        }\n    }\n    \n    return compose(withRouter,connect(mapStateToProps,null))(Authenticate);\n}","export const ADD_EXPENSE = \"ADD_EXPENSE\";\nexport const DELETE_EXPENSE = \"DELETE_EXPENSE\";\nexport const EDIT_EXPENSE = \"EDIT_EXPENSE\";\nexport const AUTHORIZE_USER = \"AUTHORIZE_USER\";","import React from 'react';\nimport './Add.css';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {withRouter} from 'react-router-dom';\nimport { addExpense } from '../../Actions/addExpense';\nimport { editExpense } from '../../Actions/editExpense';\n\nclass Add extends React.Component {\n\n  constructor(props) {\n    super(props);\n    console.log(this.props)\n    this.state = {\n      expenseId: \"0\",\n      expenseName: '',\n      expenseAmt: '',\n      expenseDate: '',\n      showStatusMsg: false\n    };\n  }\n\n  componentDidMount = () => {\n    if(this.props.editItem) {\n      let itemId = this.props.editItem.expenseId;\n      let item = this.props.data.filter( item => item.expenseId == itemId)\n      console.log(this.props.data,item)\n      this.setState({\n        expenseName: this.props.data[itemId].expenseName,\n        expenseAmt: this.props.data[itemId].expenseAmt,\n        expenseDate: this.props.data[itemId].expenseDate,  \n      })\n    }\n  }\n\n  showSuccess = () => {\n    // console.log(this.state)\n    // this.setState({\n    //   showStatusMsg:true\n    // });\n    // this.hideSuccess();\n    this.props.history.push('/report');\n  }\n\n  hideSuccess = () => {\n    setTimeout(()=>{\n      this.setState({\n        showStatusMsg: false\n      });\n      this.props.history.push('/report');\n    }, 2500);\n  } \n\n\n\n  submitForm = (event) => {\n    const { expenseName, expenseAmt, expenseDate } = this.state;\n    if(this.props.editItem) {\n      this.props.editExpense({ expenseId: this.props.editItem.expenseId, expenseName, expenseAmt, expenseDate})\n      this.props.history.push('/report'); \n    } else {\n      this.props.addExpense({expenseName, expenseAmt, expenseDate});\n      this.showSuccess();\n    }\n    \n    event.preventDefault();\n  }\n\n  handleChange = (event) => {\n    switch(event.target.className) {\n      case 'expense-date':\n          this.setState({\n            expenseDate: event.target.value\n          });\n          break;\n      case 'expense-name':\n          this.setState({\n            expenseName: event.target.value\n          });\n          break;\n      case 'expense-amt': \n          this.setState({\n            expenseAmt: event.target.value\n          });\n          break;\n      default:\n          break;\n    }\n  }\n  \n  render() {\n    return (\n      <React.Fragment>\n        <section className=\"add-expense\">\n          <header className=\"add-header\">\n            {\n              (this.props.editItem) ?\n              'Edit Expense' :\n              'Add Expenses'\n            }\n            </header>\n          <form className=\"add-form\" onSubmit={this.submitForm}>\n            <input className=\"expense-name\" placeholder=\"Enter expense name\" value={this.state.expenseName} onChange={this.handleChange} type=\"text\"  />\n            <input className=\"expense-amt\" placeholder=\"Enter expense amount\" value={this.state.expenseAmt} onChange={this.handleChange} type=\"text\"  />     \n            <input className=\"expense-date\" value={this.state.expenseDate} onChange={this.handleChange} type=\"date\"  />\n            <input className=\"add-submit\" type=\"submit\" value=\"Submit\" />\n\n          </form>\n        </section>\n        \n        \n        <section className={this.state.showStatusMsg ? 'showStatus' : 'hideStatus'}>\n        {this.state.showStatusMsg ?  \n          <span>Your record is successfully submitted.</span> \n          :\n          ''}\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state.data\n})\n\nconst mapDispatchToProps = {\n  addExpense,\n  editExpense\n}\n\nexport default compose(withRouter, connect(mapStateToProps,mapDispatchToProps))(Add);\n","import { ADD_EXPENSE } from '../Constants/action-types';\n\nexport function addExpense(payload) {\n    return {type: ADD_EXPENSE, payload};\n}","import { EDIT_EXPENSE } from '../Constants/action-types';\n\nexport function editExpense(payload) {\n    return {type: EDIT_EXPENSE, payload};\n}","import React from 'react';\nimport './Report.css';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { deleteExpense } from '../../Actions/deleteExpense';\n\nclass Report extends React.Component {\n\n  constructor(props) {\n    super(props);\n    console.log(this.props)\n    \n  }\n\n  delete = (deleteItem) => {\n    this.props.deleteExpense(deleteItem);\n    this.props.history.push('/report'); \n  }\n\n  edit = (editItem) => {\n    this.props.history.push('/edit/' + editItem.expenseId);\n  }\n  \n  render() {\n    const gridHeadings = () => {\n      return (\n          <React.Fragment>\n            <div className=\"grid-item grid-headings\">\n            <div>{'Expense Name'}</div>\n          </div>\n          <div className=\"grid-item grid-headings\">\n            <div>{'Expense Amount'}</div>\n          </div>\n          <div className=\"grid-item grid-headings\">\n            <div>{'Expense Date'}</div>\n          </div>\n          <div className=\"grid-item grid-headings\">\n            <div>{'Actions'}</div>\n          </div>\n          </React.Fragment>\n      );\n      }\n    const gridItems = this.props.data.map((item) => {\n      console.log(item.expenseId)\n      return (\n      <React.Fragment key={item.expenseName}>\n        <div key={item.expenseName} className=\"grid-item\">\n          <div>{item.expenseName}</div>\n        </div>\n        <div key={item.expenseAmt} className=\"grid-item\">\n          <div>{item.expenseAmt}</div>\n        </div>\n        <div key={item.expenseDate} className=\"grid-item\">\n          <div>{item.expenseDate}</div>\n        </div>\n        <div className=\"grid-item\">\n          <div><button className=\"editButton\" onClick={()=> this.edit(item)}><i className=\"fa fa-edit\"></i></button></div>\n          <div><button className=\"deleteButton\" onClick={()=> this.delete(item)}><i className=\"fa fa-trash\"></i></button></div>\n        </div>\n      </React.Fragment>\n      );\n    }\n    );\n\n    return (\n      <React.Fragment>\n        <section className=\"report-expense\">\n          <header className=\"report-header\">Expense Report</header>\n          <section className=\"grid-container\">\n            {gridHeadings()}\n            {gridItems}\n          </section>\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\n\n\nconst mapStateToProps = (state) => ({\n  data: state.data\n})\n\nconst mapDispatchToProps = {\n  deleteExpense\n};\n\nexport default compose(withRouter,connect(mapStateToProps,mapDispatchToProps))(Report);\n","import { DELETE_EXPENSE } from '../Constants/action-types';\n\nexport function deleteExpense(payload) {\n    return {type: DELETE_EXPENSE, payload};\n}","import React from 'react';\nimport './Edit.css';\nimport Add from '../Add/Add';\n\n\nclass Edit extends React.Component {\n\n  render() {\n    return (\n      <section className=\"edit-overlay\"> \n        <Add editItem={this.props.match.params}></Add>\n      </section>\n    )\n  }\n\n}\nexport default Edit;\n","import React from 'react';\nimport './Login.css';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {withRouter} from 'react-router-dom';\nimport { authorizeUser } from '../../Actions/authorizeUser';\n\nclass Login extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: ''\n    };\n  }\n\n  // componentDidUpdate = (prevProps) => {\n  //   console.log(prevPros)\n  // }\n\n  validateCredentials = (event) => {\n    if(this.state.username == 'ashwini' && this.state.password == 'ashwini') {\n      console.log('login',this.state);\n      // this.setState({\n      //   isAuthenticated: true\n      // }\n      \n      // ,()=>{\n      //   console.log('login',this.state);\n      //   this.props.history.push('/add');\n      //   //event.preventDefault();\n      // });\n      this.props.authorizeUser(true);\n      this.props.history.push('/add');\n      event.preventDefault();\n      \n    }\n  }\n\n  handleChange = (event) => {\n    switch(event.target.className) {\n      case 'user-name':\n          this.setState({\n            username: event.target.value\n          });\n          break;\n      case 'password':\n          this.setState({\n            password: event.target.value\n          });\n          break;\n      default:\n          break;\n    }\n  }\n  \n  render() {\n    \n    return (\n      <React.Fragment>\n        <section className=\"login\">\n          <header className=\"login-header\">\n            Login\n          </header>\n          <form className=\"login-form\" onSubmit={this.validateCredentials}>\n            <input className=\"user-name\" placeholder=\"Enter user name\" value={this.state.userName} onChange={this.handleChange} type=\"text\"  />\n            <input type=\"password\" className=\"password\" placeholder=\"Enter password\" value={this.state.password} onChange={this.handleChange} type=\"text\"  />     \n            <input className=\"login-submit\" type=\"submit\" value=\"Submit\" />\n          </form>\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = {\n  authorizeUser\n}\n\nexport default compose(withRouter, connect(null,mapDispatchToProps))(Login);\n","import { AUTHORIZE_USER } from '../Constants/action-types';\n\nexport function authorizeUser(payload) {\n    return {type: AUTHORIZE_USER, payload};\n}","import React from 'react';\nimport './App.css';\nimport Authenticate from './../../HOC/Authenticate'\n\nimport Add from './../Add/Add'\nimport Report from '../Report/Report';\nimport Edit from '../Edit/Edit';\n\nimport Login from '../Login/Login';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <main className=\"content\">\n          <BrowserRouter>\n              <Switch>\n                \n                <Route path=\"/add\" component={Authenticate(Add)} />\n                <Route path=\"/report\" component={Authenticate(Report)} />\n                <Route path=\"/edit/:expenseId\" component={Authenticate(Edit)} />\n                <Route path=\"/\" component={Login} />\n              </Switch>\n          </BrowserRouter>\n        </main>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import { ADD_EXPENSE, DELETE_EXPENSE, EDIT_EXPENSE, AUTHORIZE_USER } from '../Constants/action-types'\n\nconst initialState = {\n    data:\n    [\n        {\n            expenseId: 0,\n            expenseName: 'Groceries',\n            expenseAmt: '500',\n            expenseDate: '2019-12-12',\n        }\n    ],\n    auth: { isAuthenticated: false}\n}\n\nfunction rootReducer(state = initialState, action) {\n    switch(action.type) {\n        case AUTHORIZE_USER:\n            const authorizedState = {...state};\n            authorizedState['auth'] = {};\n            authorizedState['auth']['isAuthenticated']= action.payload;\n            return authorizedState;\n        case ADD_EXPENSE :          \n            const addState = {...state};\n            addState.data[addState.data.length] = {   \n                expenseId: addState.data.length,\n                expenseName: action.payload.expenseName,\n                expenseAmt: action.payload.expenseAmt,\n                expenseDate: action.payload.expenseDate\n            };\n            return addState;\n        case DELETE_EXPENSE :\n            const deleteState = {...state};\n            deleteState.data = deleteState.data.filter(item => item.expenseId !== action.payload.expenseId);\n            return deleteState;\n        case EDIT_EXPENSE :\n            const updatedData = action.payload;\n            const editState = {...state};\n            const index = parseInt(action.payload.expenseId);\n            editState.data[index] = updatedData;\n            return editState;\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import {createStore} from \"redux\";\nimport rootReducer from \"./../Reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { Provider } from 'react-redux';\nimport store from './Store/store';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}